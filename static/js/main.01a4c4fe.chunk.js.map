{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["coat_members","id","name","intial_coat_items1","map","member","key","intial_coat_items2","intial_coat_items3","intial_wait_items","App","props","state","coat_items","wait_items","onClickGameEnd","bind","className","this","onClick","i","wait_items_copy","slice","coat_items_copy","item","push","shift","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAGIA,G,MAAe,CAAC,CAChB,CAAEC,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,WAChB,CACC,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,WAChB,CACC,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,aAEdC,EAAqBH,EAAa,GAAGI,KAAI,SAACC,GAAD,OAC3C,wBAAIC,IAAKD,EAAOJ,IAAKI,EAAOH,SAC1BK,EAAqBP,EAAa,GAAGI,KAAI,SAACC,GAAD,OAC3C,wBAAIC,IAAKD,EAAOJ,IAAKI,EAAOH,SAC1BM,EAAqBR,EAAa,GAAGI,KAAI,SAACC,GAAD,OAC3C,wBAAIC,IAAKD,EAAOJ,IAAKI,EAAOH,SAiB1BO,EAfe,CACjB,CAAER,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,WAEmBE,KAAI,SAACC,GAAD,OACvC,wBAAIC,IAAKD,EAAOJ,IAAKI,EAAOH,SAiEjBQ,E,kDA7DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAY,CAACV,EAAoBI,EAAoBC,GACrDM,WAAYL,GAEhB,EAAKM,eAAiB,EAAKA,eAAeC,KAApB,gBANP,E,qDAUf,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,aAAf,sBAExB,4BAAKC,KAAKN,MAAMC,WAAW,IACC,4BAAQM,QAASD,KAAKH,eAAeC,KAAKE,KAAM,IAAhD,iBAEJ,yBAAKD,UAAU,aAAf,sBAExB,4BAAKC,KAAKN,MAAMC,WAAW,IACC,4BAAQM,QAASD,KAAKH,eAAeC,KAAKE,KAAM,IAAhD,iBAEJ,yBAAKD,UAAU,aAAf,sBAExB,4BAAKC,KAAKN,MAAMC,WAAW,IACC,4BAAQM,QAASD,KAAKH,eAAeC,KAAKE,KAAM,IAAhD,kBAGR,yBAAKD,UAAU,aACX,4BAAKC,KAAKN,MAAME,iB,qCAOrBM,GACX,IAAIC,EAAkBH,KAAKN,MAAME,WAAWQ,QACxCC,EAAkBL,KAAKN,MAAMC,WAAWS,QAG5CC,EAAgBH,GAAGhB,KAAI,SAACoB,GAAD,OAAUH,EAAgBI,KAAKD,MAEtDD,EAAgBH,GAAGhB,KAAI,SAACoB,GAAD,OAAUD,EAAgBH,GAAGM,WAEpDH,EAAgBH,GAAKC,EAAgBC,MAAM,EAAG,GAE9CJ,KAAKS,SAAS,CAAEd,WAAYU,IAG5BF,EAAgBK,QAChBL,EAAgBK,QAChBL,EAAgBK,QAChBL,EAAgBK,QAEhBR,KAAKS,SAAS,CAAEb,WAAYO,Q,GA1DlBO,IAAMC,WCjCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.01a4c4fe.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet coat_members = [[\n    { id: 1, name: '①' },\n    { id: 2, name: '②' },\n    { id: 3, name: '③' },\n    { id: 4, name: '④' },\n], [\n    { id: 5, name: '⑤' },\n    { id: 6, name: '⑥' },\n    { id: 7, name: '⑦' },\n    { id: 8, name: '⑧' },\n], [\n    { id: 9, name: '⑨' },\n    { id: 10, name: '⑩' },\n    { id: 11, name: '⑪' },\n    { id: 12, name: '⑫' },\n]];\nconst intial_coat_items1 = coat_members[0].map((member) =>\n    <li key={member.id}>{member.name}</li>);\nconst intial_coat_items2 = coat_members[1].map((member) =>\n    <li key={member.id}>{member.name}</li>);\nconst intial_coat_items3 = coat_members[2].map((member) =>\n    <li key={member.id}>{member.name}</li>);\n\nconst wait_members = [\n    { id: 13, name: '⑬' },\n    { id: 14, name: '⑭' },\n    { id: 15, name: '⑮' },\n    { id: 16, name: '⑯' },\n    { id: 17, name: '⑰' },\n    { id: 18, name: '⑱' },\n    { id: 19, name: '⑲' },\n    { id: 20, name: '⑳' },\n    { id: 21, name: '㉑' },\n    { id: 22, name: '㉒' },\n    { id: 23, name: '㉓' },\n    { id: 24, name: '㉔' },\n    { id: 25, name: '㉕' },\n];\nconst intial_wait_items = wait_members.map((member) =>\n    <li key={member.id}>{member.name}</li>\n);\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            coat_items: [intial_coat_items1, intial_coat_items2, intial_coat_items3],\n            wait_items: intial_wait_items\n        };\n        this.onClickGameEnd = this.onClickGameEnd.bind(this);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"boxContainer\">\n                        <div className=\"each_coat\">\n                            1コート\n<ul>{this.state.coat_items[0]}</ul>\n                            <button onClick={this.onClickGameEnd.bind(this, 0)}>終了</button>\n                        </div>\n                        <div className=\"each_coat\">\n                            2コート\n<ul>{this.state.coat_items[1]}</ul>\n                            <button onClick={this.onClickGameEnd.bind(this, 1)}>終了</button>\n                        </div>\n                        <div className=\"each_coat\">\n                            3コート\n<ul>{this.state.coat_items[2]}</ul>\n                            <button onClick={this.onClickGameEnd.bind(this, 2)}>終了</button>\n                        </div>\n                    </div>\n                    <div className=\"taiki_div\">\n                        <ol>{this.state.wait_items}</ol>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n\n    onClickGameEnd(i) {\n        let wait_items_copy = this.state.wait_items.slice();\n        let coat_items_copy = this.state.coat_items.slice();\n\n        // コート1に入っていたメンバーを待機コート末尾にコピー\n        coat_items_copy[i].map((item) => wait_items_copy.push(item));\n        // コート1のメンバーを全削除\n        coat_items_copy[i].map((item) => coat_items_copy[i].shift());\n        // 待機リスト先頭の4人をコート1にコピー\n        coat_items_copy[i] = wait_items_copy.slice(0, 4);\n        // コート1の内容を反映\n        this.setState({ coat_items: coat_items_copy });\n\n        // 待機リスト先頭4人を削除\n        wait_items_copy.shift();\n        wait_items_copy.shift();\n        wait_items_copy.shift();\n        wait_items_copy.shift();\n        // 待機リストの内容を反映\n        this.setState({ wait_items: wait_items_copy });\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}